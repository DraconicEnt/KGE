/**
 *  @file SSettingsRegistry.cpp
 */

#include <support/Logging.hpp>
#include <support/common.hpp>
#include <support/String.hpp>

#include <core/SSettingsRegistry.hpp>

namespace Kiaro
{
    namespace Core
    {
        static SSettingsRegistry* sInstance = NULL;

        SSettingsRegistry* SSettingsRegistry::getPointer(void)
        {
            if (!sInstance)
                sInstance = new SSettingsRegistry;

            return sInstance;
        }

        void SSettingsRegistry::destroy(void)
        {
            if (sInstance)
            {
                delete sInstance;
                sInstance = NULL;
            }
        }

        SSettingsRegistry::SSettingsRegistry(void)
        {
            ALLEGRO_CONFIG* config = al_load_config_file("config.cfg");

            if (!config)
            {
                Support::Logging::write(Support::Logging::MESSAGE_ERROR, "SSettingsRegistry: Failed to load config.cfg, using default values.");

                this->setValue("Server::ListenAddress", Support::String("0.0.0.0"));
                this->setValue("Server::ListenPort", Common::U16(11595));
                this->setValue("Server::MaximumClientCount", Common::U32(32));

                this->setValue("Video::Fullscreen", true);
                this->setValue("Video::Resolution", irr::core::dimension2d<Common::U32>(640, 480));

                this->setValue("System::WorkerThreadCount", Common::U8(6));
            }
            else
            {
                // Listen port?
                Common::U16 listenPort = 11595;
                const Common::C8* listenPortConfig = al_get_config_value(config, "Server", "ListenPort");
                if (listenPortConfig)
                    listenPort = atoi(listenPortConfig);

                // Maximum client count?
                Common::U32 maximumClientCount = 32;
                const Common::C8* maximumClientCountConfig = al_get_config_value(config, "Server", "MaximumClientCount");
                if (maximumClientCountConfig)
                    maximumClientCount = atoi(maximumClientCountConfig);

                // Listen Address?
                const Common::C8* listenAddressConfig = al_get_config_value(config, "Server", "ListenAddress");
                Support::String listenAddress = "0.0.0.0";
                if (listenAddressConfig)
                    listenAddress = listenAddressConfig;

                // Full screen?
                bool fullScreen = true;
                const Common::C8* fullscreenConfig = al_get_config_value(config, "Video", "Fullscreen");
                if (fullscreenConfig)
                    fullScreen = atoi(fullscreenConfig);

                // Worker thread count?
                Common::U8 workerThreadCount = 6;
                const Common::C8* workerThreadCountConfig = al_get_config_value(config, "System", "WorkerThreadCount");
                if (workerThreadCountConfig)
                    workerThreadCount = atoi(workerThreadCountConfig);

                this->setValue("Server::ListenAddress", listenAddress);
                this->setValue("Server::ListenPort", listenPort);
                this->setValue("Server::MaximumClientCount", maximumClientCount);

                this->setValue("Video::Fullscreen", fullScreen);
                this->setValue("Video::Resolution", irr::core::dimension2d<Common::U32>(640, 480));

                this->setValue("System::WorkerThreadCount", workerThreadCount);

                al_destroy_config(config);
                Support::Logging::write(Support::Logging::MESSAGE_INFO, "SSettingsRegistry: Loaded config.cfg.");
            }
        }

        SSettingsRegistry::~SSettingsRegistry(void)
        {
            // Dump our current config to the file before destroying
            ALLEGRO_CONFIG* config = al_create_config();

            if (config)
            {
                Common::C8 tempBuffer[256];
                sprintf(tempBuffer, "Automatically generated by KGE %u.%u.%u", VERSION::MAJOR, VERSION::MINOR, VERSION::REVISION);

                // Header comments---------------------
                al_add_config_comment(config, NULL, "Configuration values for the operation of the KGE");
                al_add_config_comment(config, NULL, tempBuffer);

                // Write server section----------------
                al_add_config_section(config, "Server");
                al_add_config_comment(config, "Server", "Configuration values for the server end");
                al_add_config_comment(config, "Server", "ListenAddress specifies what IP address the server will bind to");
                al_set_config_value(config, "Server", "ListenAddress", this->getValue<Support::String>("Server::ListenAddress").data());

                // Listen Port
                sprintf(tempBuffer, "%u", this->getValue<Common::U16>("Server::ListenPort"));
                al_add_config_comment(config, "Server", "ListenPort specifies what port number the server will listen on");
                al_set_config_value(config, "Server", "ListenPort", tempBuffer);

                // Maximum Client Count
                sprintf(tempBuffer, "%u", this->getValue<Common::U32>("Server::MaximumClientCount"));
                al_add_config_comment(config, "Server", "MaximumClientCount specifies the maximum number of remote clients allowed");
                al_set_config_value(config, "Server", "MaximumClientCount", tempBuffer);

                // Write video section-----------------------
                al_add_config_section(config, "Video");
                al_add_config_comment(config, "Video", "Video output configuration");
                al_add_config_comment(config, "Video", "Resolution controls the window resolution of the engine");
                al_set_config_value(config, "Video", "Resolution", "640x480");
                al_add_config_comment(config, "Video", "Fullscreen controls whether or not the engine will run full screen");
                al_set_config_value(config, "Video", "Fullscreen", "1");

                // Write system section----------------------
                al_add_config_section(config, "System");
                al_add_config_comment(config, "System", "System wide configuration");

                // Worder Thread Count
                sprintf(tempBuffer, "%u", this->getValue<Common::U8>("System::WorkerThreadCount"));
                al_add_config_comment(config, "System", "WorkerThreadCount dictates how many worker threads will be created for the asynchronous task manager");
                al_add_config_comment(config, "System", "If WorkerThreadCount=0 then the async tasker is disabled and such tasks will be handled synchronously");
                al_set_config_value(config, "System", "WorkerThreadCount", tempBuffer);

                // We're done
                al_save_config_file("config.cfg", config);
                al_destroy_config(config);

                Support::Logging::write(Support::Logging::MESSAGE_INFO, "SSettingsRegistry: Wrote new configuration file.");
            }
            else
                Support::Logging::write(Support::Logging::MESSAGE_FATAL, "SSettingsRegistry: Failed to acquire Allegro config handle!");

            // Make sure we clear the heap elements
            for (auto it = mStoredProperties.begin(); it != mStoredProperties.end(); it++)
                free(it->second.first);
        }
    } // End NameSpace Core
} // End NameSpace Kiaro
